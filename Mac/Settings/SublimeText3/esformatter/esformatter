{
    "preset": "default",
    "plugins": [
        // "esformatter-collapse-objects",
        "esformatter-jsx"
        // "esformatter-literal-notation",
        // "esformatter-parseint",
        // "esformatter-quote-props",
        // "esformatter-quotes",
        // "esformatter-remove-trailing-commas",
        // "esformatter-semicolons",
        // "esformatter-spaced-lined-comment",
        // "esformatter-var-each"
    ],
    "collapseObjects":
    {
        "ObjectExpression":
        {
            "maxLineLength": 79,
            "maxKeys": 1
        }
    },
    "indent":
    {
        "AlignComments": false,
        "value": "    "
    },
    "jsx":
    {
        "alignWithFirstAttribute": false, // do not align attributes with the first tag 
        "attrsOnSameLineAsTag": true, // move each attribute to its own line 
        "closingTagOnNewLine": false, // default false. if true attributes on multiple lines will close the tag on a new line 
        "firstAttributeOnSameLine": true, // keep the first attribute in the same line as the tag 
        "formatJSX": true, //Duh! that's the default 
        "formatJSXExpressions": true, // default true, if false jsxExpressions won't be recursively formatted 
        "htmlOptions":
        {
            // put here the options for js-beautify.html 
            "allowed_file_extensions": [
                "js",
                "jsbeautifyrc",
                "jshintrc",
                "json",
                "jsx"
            ],
            // Set brace_style
            //  collapse: (old default) Put braces on the same line as control statements
            //  collapse-preserve-inline: (new default) Same as collapse but better support for ES6 destructuring and other features. https://github.com/victorporof/Sublime-HTMLPrettify/issues/231
            //  expand: Put braces on own line (Allman / ANSI style)
            //  end-expand: Put end braces on own line
            //  none: Keep them where they are
            "brace_style": "collapse-preserve-inline",
            // Break chained method calls across subsequent lines
            "break_chained_methods": false,
            // Pass E4X xml literals through untouched
            "e4x": false,
            // End output with newline
            "end_with_newline": false,
            // Indentation character
            "indent_char": " ",
            // Initial indentation level
            "indent_level": 0,
            // Indentation size
            "indent_size": 4,
            // Indent with tabs, overrides `indent_size` and `indent_char`
            "indent_with_tabs": false,
            // If true, then jslint-stricter mode is enforced
            "jslint_happy": false,
            // Preserve array indentation
            "keep_array_indentation": false,
            // Preserve function indentation
            "keep_function_indentation": false,
            // Maximum number of line breaks to be preserved in one chunk (0 disables)
            "max_preserve_newlines": 0,
            // Whether existing line breaks should be preserved
            "preserve_newlines": true,
            // Should the space before an anonymous function's parens be added, "function()" vs "function ()"
            "space_after_anon_function": false,
            // Should the space before conditional statement be added, "if(true)" vs "if (true)"
            "space_before_conditional": true,
            // Add padding spaces within empty paren, "f()" vs "f( )"
            "space_in_empty_paren": false,
            // Add padding spaces within paren, ie. f( a, b )
            "space_in_paren": false,
            // Should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"
            "unescape_strings": false,
            // Lines should wrap at next opportunity after this number of characters (0 disables)
            "wrap_line_length": 0
        },
        "JSXExpressionsSingleLine": true, // default true, if false the JSXExpressions might span several lines 
        "maxAttrsOnTag": 3, // if lower or equal than 3 attributes, they will be kept on a single line 
        "removeSpaceBeforeClosingJSX": false, // default false. if true <React.Something /> => <React.Something/> 
        "spaceInJSXExpressionContainers": " " // default to one space. Make it empty if you don't like spaces between JSXExpressionContainers 
    },
    "quotes":
    {
        "type": "double"
    },
    "whiteSpace":
    {
        "before":
        {
            "ObjectExpressionClosingBrace": 0,
            "ModuleSpecifierClosingBrace": 0,
            "PropertyName": 1
        },
        "after":
        {
            "ObjectExpressionOpeningBrace": 0,
            "ModuleSpecifierOpeningBrace": 0
        }
    }
}